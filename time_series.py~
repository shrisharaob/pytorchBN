import torch
import torch.nn as nn
import torch.nn.functional as F
import numpy as np


class BalRNN(nn.Module):
    '''one pop bal network with training on sqrt(K) weights'''

    def __init__(self,
                 input_size,
                 hidden_size,
                 num_layers,
                 batch_first=True,
                 K=10,
                 JI0=0.4,
                 JII=-0.1):
        super(BalRNN, self).__init__()
        self.hidden_size = hidden_size
        self.num_layers = num_layers
        self.batch_first = batch_first
        self.K = K
        self.JI0 = JI0
        self.JII = JII
        #
        self.history = []
        # ff
        self.weight_ih = nn.ParameterList([
            nn.Parameter(
                self.initialize_ff_weight(input_size, hidden_size, K, JII))
            for _ in range(num_layers)
        ])

        # Initialize hidden-to-hidden recurrent weights with masking
        self.weight_hh = nn.ParameterList([
            nn.Parameter(self.initialize_masked_weight(hidden_size, K, JII))
            for _ in range(num_layers)
        ])

        # Linear layer to map from hidden_size to input_size
        self.output_layer = nn.Linear(hidden_size, input_size)

    def initialize_ff_weight(self, input_size, hidden_size, K, JI0):
        indices = []
        values = []
        for i in range(hidden_size):
            tmp_K = np.where(np.random.rand(input_size) <= K / input_size)[0]
            selected_indices = torch.tensor(tmp_K)
            num_selected_indices = selected_indices.shape[0]
            indices.extend([[i, j] for j in selected_indices])
            values.extend(
                [self.JI0 / torch.sqrt(torch.tensor(K, dtype=torch.float32))] *
                num_selected_indices)  # list mult

        indices = torch.tensor(indices).t()
        values = torch.tensor(values, dtype=torch.float32)
        ff_sparse_weight = torch.sparse.FloatTensor(
            indices, values, torch.Size([hidden_size, input_size]))
        return ff_sparse_weight

    def initialize_sparse_weight(self, hidden_size, K, J):
        indices = []
        values = []
        for i in range(hidden_size):
            selected_indices = torch.randperm(hidden_size)[:int(
                K)]  # Choose sqrt(K) indices randomly
            indices.extend([[i, j] for j in selected_indices])
            values.extend(
                [J / torch.sqrt(torch.tensor(K, dtype=torch.float32))] *
                int(K))

        indices = torch.tensor(indices).t()
        values = torch.tensor(values, dtype=torch.float32)
        sparse_weight = torch.sparse.FloatTensor(
            indices, values, torch.Size([hidden_size, hidden_size]))
        return sparse_weight

    def initialize_masked_weight(self, hidden_size, K, J):
        mask_indices = []
        mask_values = []

        for i in range(hidden_size):
            tmp_K = np.where(np.random.rand(hidden_size) <= K / hidden_size)[0]
            selected_indices = torch.tensor(tmp_K)
            num_selected_indices = selected_indices.shape[0]

            mask_indices.extend([[i, j] for j in selected_indices])
            mask_values.extend(
                [J / torch.sqrt(torch.tensor(K, dtype=torch.float32))] *
                num_selected_indices)

            trainable_indices = selected_indices[:int(K**0.5)]
            trainable_values = [
                J / torch.sqrt(torch.tensor(int(K**0.5), dtype=torch.float32))
            ] * int(K**0.5)
            mask_values[-int(K**0.5):] = trainable_values

            trainable_mask = torch.zeros(hidden_size)
            trainable_mask[trainable_indices] = 1
            trainable_mask = trainable_mask.unsqueeze(1)
            trainable_mask = trainable_mask.repeat(1, hidden_size)
            trainable_mask = trainable_mask.reshape(-1)

        mask_indices = torch.tensor(mask_indices).t()
        mask_values = torch.tensor(mask_values, dtype=torch.float32)
        masked_weight = torch.sparse.FloatTensor(
            mask_indices, mask_values, torch.Size([hidden_size, hidden_size]))

        trainable_mask = torch.tensor(trainable_mask, dtype=torch.bool)
        masked_weight.requires_grad = True
        masked_weight.mask = trainable_mask

        return masked_weight

    def transfer_function(self, total_input):
        return F.relu(total_input)

    def forward(self, x, h_0=None):
        if self.batch_first:
            x = x.transpose(0, 1)  # Ensure (seq_len, batch_size, input_size)
        seq_len, batch_size, _ = x.size()
        if h_0 is None:
            h_0 = torch.zeros(self.num_layers, batch_size, self.hidden_size)
        h_t_minus_1 = h_0
        h_t = h_0.clone()
        output = []
        for t in range(seq_len):
            for layer in range(self.num_layers):
                if layer == 0:
                    h_t[layer] = self.transfer_function(
                        torch.sparse.mm(self.weight_ih[layer], x[t].T).T +
                        torch.sparse.mm(self.weight_hh[layer],
                                        h_t_minus_1[layer].T).T)
                else:
                    h_t[layer] = self.transfer_function(
                        torch.sparse.mm(self.weight_hh[layer], h_t[layer -
                                                                   1].T).T +
                        torch.sparse.mm(self.weight_hh[layer],
                                        h_t_minus_1[layer].T).T)
            output.append(h_t[-1])
            h_t_minus_1 = h_t.clone()
        output = torch.stack(output)
        if self.batch_first:
            output = output.transpose(0, 1)
        # Apply the linear layer to map to input_size
        output = self.output_layer(output)
        return output, h_t
